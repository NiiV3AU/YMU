# This workflow will install Python dependencies, run tests, build an executable then upload it to github releases

name: YMU Release

on: 
  workflow_dispatch:


jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pyinstaller
        pip install -r requirements.txt
    - name: flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: create binary
      run: |
        pyinstaller --noconfirm --onefile --windowed --noconsole --icon=ymu.ico "ymu.py"
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary
        path: |
          dist\ymu.exe
    - name: Generate Build Info
      id: var
      run: |
        echo "full_sha=$(git rev-parse HEAD)" >> $env:GITHUB_OUTPUT
        echo "short_sha=$(git rev-parse --short HEAD)" >> $env:GITHUB_OUTPUT

  create_release:
  
    runs-on: ubuntu-latest
    name: Create Release
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Delete Existing Release
      id: delete_ex_release
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const tag = "release";
      
            // List all releases and find the release by tag
            const releases = await github.rest.repos.listReleases({
              owner: owner,
              repo: repo,
            });
      
            const release = releases.data.find(release => release.tag_name === tag);
      
            // Check if the release exists and delete it
            if (release) {
              await github.rest.repos.deleteRelease({
                owner: owner,
                repo: repo,
                release_id: release.id,
              });
              console.log(`Deleted release with ID ${release.id}`);
            } else {
              console.log("No existing release to delete");
            }
      
            // Delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: owner,
                repo: repo,
                ref: `tags/${tag}`,
              });
              console.log(`Deleted tag ${tag}`);
            } catch (error) {
              console.error(`Error deleting tag: ${error.message}`);
            }

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: binary

    - name: Echo build sha256
      id: build_sha
      run: |
        sha256sum ymu.exe > sha256.checksum
        echo "build_sha=$(cat sha256.checksum)" >> $GITHUB_OUTPUT
        cat sha256.checksum
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        name: YMU
        tag_name: release
        body: |
            **This release has been built by Github Actions**
            [Link to build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

        files: |
          ymu.exe
